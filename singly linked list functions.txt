#include <stdio.h>
#include<stdlib.h>
struct node
{
  int info;
  struct node*link;
}*start;
 void create_list();
 void addAtBeg();
 void addAfter();
 void display();
 void delete();
 void search();
 void count();
 void reverse();
 void exit();
int main()
{
  int i,ch,n,m,pos;
  start=NULL;
  while(1)
  {
    printf("1. create list\n");
    printf("2. insert at begining\n");
    printf("3. insert at position\n");
    printf("4. display\n");
    printf("5. delete\n");
    printf("6. count\n");
    printf("7. reverse\n");
    printf("8. search\n");
    printf("9. quit\n");
    printf("enter your choice\n");
    scanf("%d",&ch);
    switch(ch)
    {
case 1: printf("how many nodes you want\n");
scanf("%d",&n);
for(i=0;i<n;i++)
{
  printf("enter the element\n");
  scanf("%d",&m);
  create_list(m);
}
break;
case 2: printf("enter the element\n");
scanf("%d",&m);
addAtBeg(m);
break;
case 3: printf("enter element\n");
scanf("%d",&m);
printf("enter position\n");
scanf("%d",&pos);
addAfter(m,pos);
break;
case 4: display();
break;
case 5: if(start==NULL)
{
  printf("empty list\n");
  continue;
}
printf("enter the element to be deleted\n");
scanf("%d",&m);
delete(m);
break;
case 8: printf("enter element to search\n");
scanf("%d",&m);
search(m,pos);
break;
case 6: count();
break;
case 7: reverse();
break;
case 9: exit(1);
default: printf("wrong choice\n");
   }
  }
  return 0;
}
void create_list(int data)
{
  struct node *q, *tmp;
  tmp=malloc(sizeof(struct node));
  tmp->info=data;
  tmp->link=NULL;
  if(start==NULL)
  start=tmp;
  else{
    q=start;
    while(q->link!=NULL)
    q=q->link;
    q->link=tmp;
  }
}
void addAtBeg(int data)
{
 struct node*tmp;
tmp=malloc(sizeof(struct node));
 tmp->info=data;
 tmp->link=start;
 start=tmp;
}
void addAfter(int data, int pos)
{
  struct node*tmp,*q;
  int i;
  q=start;
  for(i=0;i<pos-1;i++)
  {
    q=q->link;
    if(q==NULL)
    {
      printf("out of range\n");
      return;
    }
  }
  tmp=malloc(sizeof(struct node));
  tmp->link=q->link;
  tmp->info=data;
  q->link=tmp;
}
void display()
{
 struct node *q;
 if(start==NULL)
 {
   printf("empty list\n");
   return;
 }
 q=start;
 printf("list is:\n");
 while(q!=NULL)
 {
   printf("%d",q->info);
   q=q->link;
   printf("\n");
 }
}
void delete(int data)
{
  struct node *tmp,*q;
  if(start->info==data)
  {
    tmp=start;
    start=start->link;
    free(tmp);
    return;
  }
  q=start;
  while(q->link->link!=NULL)
  {
    if(q->link->info==data)
    {
      tmp=q->link;
      q->link=tmp->link;
      free(tmp);
      return;
    }
    q=q->link;
  }
  if(q->link->info==data)
   {
     tmp=q->link;
     free(tmp);
     q->link=NULL;
     return;
   }
  printf("element %d not found in list\n",data);
}
void search(int data)
{
  struct node*q=start;
  int pos=1;
  while(q!=NULL)
  {
    if(q->info==data)
    {
      printf("item %d found at %d position\n",data,pos);
        return;
    }
      q=q->link;
      pos++;
  }
    if(q==NULL)
    printf("element %d not found in linked list\n",data);
}
void count()
{
  struct node *q=start;
  int cnt=0;
  while(q!=NULL)
  {
    q=q->link;
    cnt++;
  }
  printf("total number of nodes in linked list is %d\n",cnt);
}
void reverse()
{
  struct node *p1,*p2,*p3;
  if(start->link==NULL)
  return;

  p1=start;
  p2=start->link;
  p3=p2->link;
  
  p1->link=NULL;
  p2->link=p1;
  while(p3!=NULL)
  {
    p1=p2;
    p2=p3;
    p3=p3->link;
    p2->link=p1;
  }
 start=p2;
}